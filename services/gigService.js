const GIGS_KEY = 'colleagueConnectGigs';

/**
 * Safely retrieves gigs from localStorage.
 */
function getGigsFromStorage() {
  try {
    const data = localStorage.getItem(GIGS_KEY);
    return data ? JSON.parse(data) : [];
  } catch (err) {
    console.error('[GigService] Failed to parse gigs from localStorage:', err);
    return [];
  }
}

/**
 * Persists gig array to localStorage.
 */
function saveGigsToStorage(gigs) {
  try {
    localStorage.setItem(GIGS_KEY, JSON.stringify(gigs));
  } catch (err) {
    console.error('[GigService] Failed to save gigs to localStorage:', err);
  }
}

/**
 * Generates a unique gig ID using timestamp and random suffix.
 */
function generateGigId() {
  const timestamp = Date.now();
  const randomSuffix = Math.random().toString(36).substring(2, 7);
  return `gig-${timestamp}-${randomSuffix}`;
}

export const gigService = {
  /**
   * Retrieves and deduplicates gigs from localStorage, sorted by timestamp (descending).
   */
  getGigs() {
    const rawGigs = getGigsFromStorage();

    const uniqueGigsMap = new Map();
    rawGigs.forEach(gig => {
      const key = `${gig.title}_${gig.contact}`;
      uniqueGigsMap.set(key, gig); // Last one wins
    });

    return Array.from(uniqueGigsMap.values()).sort(
      (a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
    );
  },

  /**
   * Adds a new gig entry with autogenerated ID and timestamp.
   */
  addGig(data) {
    const gigs = getGigsFromStorage();

    const newGig = {
      id: generateGigId(),
      timestamp: new Date().toISOString(),
      ...data,
    };

    saveGigsToStorage([newGig, ...gigs]);
    return newGig;
  },
};
